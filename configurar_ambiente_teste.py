#!/usr/bin/env python
"""
Configurador de Ambiente de Teste para SISVENDA
Automatiza a configura√ß√£o do ambiente virtual e depend√™ncias para testes
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_header(mensagem):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 80)
    print(f" {mensagem} ".center(80, "="))
    print("=" * 80)

def verificar_python():
    """Verifica a vers√£o do Python"""
    print_header("Verificando vers√£o do Python")
    
    versao = sys.version_info
    print(f"Python {versao.major}.{versao.minor}.{versao.micro}")
    
    if versao.major < 3 or (versao.major == 3 and versao.minor < 8):
        print("‚ùå ERRO: Vers√£o do Python muito antiga!")
        print("Por favor, instale Python 3.8 ou superior.")
        sys.exit(1)
    else:
        print("‚úÖ Vers√£o do Python compat√≠vel!")

def criar_ambiente_virtual():
    """Cria e ativa o ambiente virtual para testes"""
    print_header("Configurando ambiente virtual")
    
    venv_path = Path("venv_teste")
    
    # Verificar se o ambiente virtual j√° existe
    if venv_path.exists():
        print("‚ö†Ô∏è  Ambiente virtual j√° existe.")
        resposta = input("Deseja recri√°-lo? (s/n): ").lower()
        if resposta == 's':
            print("üóëÔ∏è  Removendo ambiente virtual existente...")
            try:
                if platform.system() == "Windows":
                    subprocess.run(["rmdir", "/S", "/Q", str(venv_path)], check=True)
                else:
                    subprocess.run(["rm", "-rf", str(venv_path)], check=True)
                print("‚úÖ Ambiente virtual removido!")
            except subprocess.CalledProcessError:
                print("‚ùå Erro ao remover ambiente virtual.")
                return False
        else:
            print("‚ÑπÔ∏è  Mantendo ambiente virtual existente.")
            return True
    
    # Criar ambiente virtual
    print("üîß Criando novo ambiente virtual...")
    try:
        subprocess.run([sys.executable, "-m", "venv", str(venv_path)], check=True)
        print("‚úÖ Ambiente virtual criado com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao criar ambiente virtual.")
        return False

def instalar_dependencias(venv_path):
    """Instala as depend√™ncias necess√°rias para os testes"""
    print_header("Instalando depend√™ncias")
    
    # Determinar o caminho do pip no ambiente virtual
    if platform.system() == "Windows":
        pip_path = os.path.join(venv_path, "Scripts", "pip")
    else:
        pip_path = os.path.join(venv_path, "bin", "pip")
    
    # Atualizar pip
    print("üì¶ Atualizando pip...")
    try:
        subprocess.run([pip_path, "install", "--upgrade", "pip"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Aviso: N√£o foi poss√≠vel atualizar pip, continuando...")
    
    # Instalar Django
    print("\nüì¶ Instalando Django...")
    try:
        subprocess.run([pip_path, "install", "Django>=5.2,<6.0"], check=True)
        print("‚úÖ Django instalado!")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar Django.")
        return False
    
    # Instalar bibliotecas para relat√≥rios
    print("\nüì¶ Instalando bibliotecas para relat√≥rios...")
    try:
        subprocess.run([pip_path, "install", "reportlab", "openpyxl"], check=True)
        print("‚úÖ Bibliotecas de relat√≥rio instaladas!")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar bibliotecas de relat√≥rio.")
        return False
    
    # Instalar bibliotecas para gr√°ficos do relat√≥rio
    print("\nüì¶ Instalando bibliotecas para gr√°ficos...")
    try:
        subprocess.run([pip_path, "install", "matplotlib", "numpy"], check=True)
        print("‚úÖ Bibliotecas de gr√°ficos instaladas!")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar bibliotecas de gr√°ficos.")
        return False
    
    # Instalar cobertura de c√≥digo
    print("\nüì¶ Instalando biblioteca de cobertura de c√≥digo...")
    try:
        subprocess.run([pip_path, "install", "coverage"], check=True)
        print("‚úÖ Coverage instalado!")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar coverage.")
        return False
    
    return True

def configurar_ambiente():
    """Fun√ß√£o principal para configurar o ambiente de teste"""
    print_header("CONFIGURADOR DE AMBIENTE DE TESTE")
    print("Sistema: SISVENDA - Testes das User Stories 7, 8 e 9")
    
    # Verificar vers√£o do Python
    verificar_python()
    
    # Criar ambiente virtual
    if not criar_ambiente_virtual():
        print("‚ùå Falha na configura√ß√£o do ambiente virtual.")
        return False
    
    # Instalar depend√™ncias
    venv_path = "venv_teste"
    if not instalar_dependencias(venv_path):
        print("‚ùå Falha na instala√ß√£o das depend√™ncias.")
        return False
    
    print_header("CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    
    # Instru√ß√µes finais
    if platform.system() == "Windows":
        print("üìù Para ativar o ambiente virtual, execute:")
        print("   venv_teste\\Scripts\\activate")
    else:
        print("üìù Para ativar o ambiente virtual, execute:")
        print("   source venv_teste/bin/activate")
    
    print("\nüìù Para executar os testes, ative o ambiente virtual e execute:")
    print("   python executar_testes.py")
    
    print("\nüìù Para gerar os gr√°ficos do relat√≥rio, execute:")
    print("   python gerar_graficos_relatorio.py")
    
    print("\nüìù Para verificar a cobertura de c√≥digo, execute:")
    print("   coverage run --source='.' manage.py test produto.tests.GerenteEstoqueTestCase")
    print("   coverage report")
    print("   coverage html  # para um relat√≥rio detalhado em HTML")
    
    return True

if __name__ == "__main__":
    configurar_ambiente()
